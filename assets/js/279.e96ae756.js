(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{623:function(t,a,r){"use strict";r.r(a);var e=r(43),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"secure-安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#secure-安全"}},[t._v("#")]),t._v(" secure 安全")]),t._v(" "),r("p",[t._v("xss 攻击\nCross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。")]),t._v(" "),r("h2",{attrs:{id:"_1-1-存储型攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-存储型攻击"}},[t._v("#")]),t._v(" 1.1 存储型攻击")]),t._v(" "),r("p",[t._v("存储型攻击常发生在微博论坛等用户发帖、提交文章评论等地方\n将恶意代码提交到数据库\n数据库将其保存\n他用户查看帖子或者评论\n服务端返回恶意代码并被拼接到客户端页面\n恶意代码可能通过自执行或者用户点击执行来弹出广告或者获取用户的 cookie 等个人隐私并上报到攻击者数据库")]),t._v(" "),r("h2",{attrs:{id:"_1-2-反射型攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-反射型攻击"}},[t._v("#")]),t._v(" 1.2 反射型攻击")]),t._v(" "),r("p",[t._v("反射型攻击主要发生在一些带有诱导性的链接的按钮邮件等\n攻击者在一些链接的参数中加入恶意代码并诱导用户点击\n用户通过点击将请求参数传入服务端\n服务端获取参数并拼接返回给客户端\n客户端执行恶意代码冒充用户进行权限操作或者盗取用户的 cookie 等个人隐私并上报攻击者数据库")]),t._v(" "),r("h2",{attrs:{id:"_1-3-dom-型攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-dom-型攻击"}},[t._v("#")]),t._v(" 1.3 DOM 型攻击")]),t._v(" "),r("p",[t._v("攻击者构造出特殊的 URL，其中包含恶意代码。\n用户打开带有恶意代码的 URL。\n用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。\n恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。")]),t._v(" "),r("p",[t._v("DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。")]),t._v(" "),r("h3",{attrs:{id:"如何防范-xss-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何防范-xss-攻击"}},[t._v("#")]),t._v(" 如何防范 xss 攻击")]),t._v(" "),r("p",[t._v("客户端对用户输入的内容进行安全符转义，服务端对上交内容进行安全转义")]),t._v(" "),r("p",[t._v("服务端渲染开启模板引擎自带的 HTML 转义功能。")]),t._v(" "),r("p",[t._v("避免内联事件，尽量不要使用 onLoad=\"onload('"+t._s(t.data)+"')\"、onClick=\"go('"+t._s(t.action)+"')\" 这种拼接内联事件的写法。在 JavaScript 中通过 .addEventlistener() 事件绑定会更安全。")]),t._v(" "),r("p",[t._v("避免拼接 HTML，前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 createElement、setAttribute 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。")]),t._v(" "),r("p",[t._v("时刻保持警惕在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。")]),t._v(" "),r("p",[t._v("通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。")]),t._v(" "),r("p",[t._v("主动检测和发现，可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。")]),t._v(" "),r("p",[t._v("尽量避免三方跨域提交内容到服务端")]),t._v(" "),r("p",[t._v("HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。")]),t._v(" "),r("p",[t._v("验证码：防止脚本冒充用户提交危险操作。")]),t._v(" "),r("h2",{attrs:{id:"csrf-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击"}},[t._v("#")]),t._v(" CSRF 攻击")]),t._v(" "),r("p",[t._v("CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),r("h3",{attrs:{id:"_1-1-主动型攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-主动型攻击"}},[t._v("#")]),t._v(" 1.1 主动型攻击")]),t._v(" "),r("p",[t._v("受害者访问 a.com 并在自己浏览器留下 a.com 的登录态")]),t._v(" "),r("p",[t._v("攻击者诱导受害者访问三方网站 b.com")]),t._v(" "),r("p",[t._v("三方网站 b.com 植有访问 a.com 接口的恶意代码（删除/增加/修改等）")]),t._v(" "),r("p",[t._v("受害者点击 b.com 时候，b.com 带着 a.com 的登陆凭证冒充受害用户执行对 a.com 的恶意操作")]),t._v(" "),r("h3",{attrs:{id:"_1-2-被动型攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-被动型攻击"}},[t._v("#")]),t._v(" 1.2 被动型攻击")]),t._v(" "),r("p",[t._v("攻击者在 a.com 发布带有恶意链接的帖子或者评论（提交对 a.com 带有增删改的诱导型 img/form/a 标签）")]),t._v(" "),r("p",[t._v("当其他拥有登录态的受害者点击该评论的恶意链接冒用受害者登录凭证发起攻击")]),t._v(" "),r("p",[t._v("CSRF 主要是冒用受害者登录凭证发起恶意的增删改并不会窃取受害者隐私信息")]),t._v(" "),r("h3",{attrs:{id:"如何预防-csrf-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何预防-csrf-攻击"}},[t._v("#")]),t._v(" 如何预防 CSRF 攻击")]),t._v(" "),r("p",[t._v("禁止三方网站获取 cookie,比如设置 Chrome 的 SameSite 属性\n服务端通过 Referer Header 和 Origin Header 来进行同源验证\n利用 token 来鉴别，三方跨站请求并不能获取到头部的 token，本站的接口在请求前都会在请求头增加 token 用于身份鉴权，三方请求并不会携带 token")]),t._v(" "),r("h2",{attrs:{id:"防御-xss-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防御-xss-攻击"}},[t._v("#")]),t._v(" 防御 XSS 攻击")]),t._v(" "),r("p",[t._v("HttpOnly 防止劫取 Cookie\n用户的输入检查\n服务端的输出检查")]),t._v(" "),r("h2",{attrs:{id:"防御-csrf-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防御-csrf-攻击"}},[t._v("#")]),t._v(" 防御 CSRF 攻击")]),t._v(" "),r("p",[t._v("验证码\nReferer Check\nToken 验证")]),t._v(" "),r("h2",{attrs:{id:"links"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" links")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s/-zKukqJEtLRfYpMELaeDmQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("大前端网络安全精简指南手册 【推荐收藏】"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.infoq.cn/article/3mZzJIjrhqdhBkScjjq9",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列（一）：如何防止 XSS 攻击？"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);