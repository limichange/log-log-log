(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{385:function(e,t,r){"use strict";r.r(t);var a=r(43),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"read-only-array-and-tuple-types-in-typescript"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#read-only-array-and-tuple-types-in-typescript"}},[e._v("#")]),e._v(" Read-Only Array and Tuple Types in TypeScript")]),e._v(" "),r("p",[e._v("ReadonlyArray"),r("string",[e._v(" and readonly string[] represent the same type; you can pick whichever syntax you prefer. I like readonly T[] because it's more concise and closer to T[], but your mileage may vary. It's just a matter of preference.")])],1),e._v(" "),r("h2",{attrs:{id:"links"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[e._v("#")]),e._v(" links")]),e._v(" "),r("ul",[r("li",[e._v("https://mariusschulz.com/blog/read-only-array-and-tuple-types-in-typescript")])])])}),[],!1,null,null,null);t.default=s.exports}}]);