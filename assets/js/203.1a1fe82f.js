(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{546:function(t,a,e){"use strict";e.r(a);var n=e(43),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[t._v("#")]),t._v(" 事件循环机制")]),t._v(" "),e("p",[t._v("我们知道 async 隐式返回 Promise 作为结果的函数,那么可以简单理解为，await 后面的函数执行完毕时，await 会产生一个微任务(Promise.then 是微任务)。但是我们要注意这个微任务产生的时机，它是执行完 await 之后，直接跳出 async 函数，执行其他代码(此处就是协程的运作，A 暂停执行，控制权交给 B)。其他代码执行完毕后，再回到 async 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中")]),t._v(" "),e("h2",{attrs:{id:"node-中的事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-中的事件循环"}},[t._v("#")]),t._v(" node 中的事件循环")]),t._v(" "),e("p",[t._v("浏览器中有事件循环，node 中也有，事件循环是 node 处理非阻塞 I/O 操作的机制，node 中事件循环的实现是依靠的 libuv 引擎。由于 node 11 之后，事件循环的一些原理发生了变化，这里就以新的标准去讲，最后再列上变化点让大家了解前因后果。")]),t._v(" "),e("h2",{attrs:{id:"links"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" links")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://mp.weixin.qq.com/s/QgfE5Km1xiEkQqADMLmj-Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("事件循环机制"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);