(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(e,t,r){"use strict";r.r(t);var a=r(43),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"git-merge-和-rebase-分支合并命令的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-和-rebase-分支合并命令的区别"}},[e._v("#")]),e._v(" Git merge 和 rebase 分支合并命令的区别")]),e._v(" "),r("h2",{attrs:{id:"merge"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[e._v("#")]),e._v(" merge")]),e._v(" "),r("p",[e._v("只处理一次冲突\n引入了一次合并的历史记录，合并后的所有 commit 会按照提交时间从旧到新排列\n所有的过程信息更多，可能会提高之后查找问题的难度")]),e._v(" "),r("h2",{attrs:{id:"rebase"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[e._v("#")]),e._v(" rebase")]),e._v(" "),r("p",[e._v("改变当前分支从 master 上拉出分支的位置\n没有多余的合并历史的记录，且合并后的 commit 顺序不一定按照 commit 的提交时间排列\n可能会多次解决同一个地方的冲突（有 squash 来解决）\n更清爽一些，master 分支上每个 commit 点都是相对独立完整的功能单元")]),e._v(" "),r("h2",{attrs:{id:"links"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[e._v("#")]),e._v(" links")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/post/5af26c4d5188256728605809#heading-2",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git merge 和 rebase 分支合并命令的区别"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);