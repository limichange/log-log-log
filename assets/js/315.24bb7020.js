(window.webpackJsonp=window.webpackJsonp||[]).push([[315],{660:function(t,v,_){"use strict";_.r(v);var r=_(43),e=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"原理和机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原理和机制"}},[t._v("#")]),t._v(" 原理和机制")]),t._v(" "),_("h2",{attrs:{id:"基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("名称")]),t._v(" "),_("th",[t._v("解释")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Entry")]),t._v(" "),_("td",[t._v("入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。")])]),t._v(" "),_("tr",[_("td",[t._v("Module")]),t._v(" "),_("td",[t._v("模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。")])]),t._v(" "),_("tr",[_("td",[t._v("Chunk")]),t._v(" "),_("td",[t._v("代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。")])]),t._v(" "),_("tr",[_("td",[t._v("Loader")]),t._v(" "),_("td",[t._v("模块转换器，用于把模块原内容按照需求转换成新内容。")])]),t._v(" "),_("tr",[_("td",[t._v("Plugin")]),t._v(" "),_("td",[t._v("扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。")])])])]),t._v(" "),_("h2",{attrs:{id:"流程概括"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流程概括"}},[t._v("#")]),t._v(" 流程概括")]),t._v(" "),_("p",[t._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("div",{staticStyle:{width:"100px"}},[t._v("名称")])]),t._v(" "),_("th",[t._v("解释")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("初始化参数")]),t._v(" "),_("td",[t._v("从配置文件和 Shell 语句中读取与合并参数，得出最终的参数")])]),t._v(" "),_("tr",[_("td",[t._v("开始编译")]),t._v(" "),_("td",[t._v("用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译")])]),t._v(" "),_("tr",[_("td",[t._v("确定入口")]),t._v(" "),_("td",[t._v("根据配置中的 entry 找出所有的入口文件")])]),t._v(" "),_("tr",[_("td",[t._v("编译模块")]),t._v(" "),_("td",[t._v("从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理")])]),t._v(" "),_("tr",[_("td",[t._v("完成模块编译")]),t._v(" "),_("td",[t._v("在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系")])]),t._v(" "),_("tr",[_("td",[t._v("输出资源")]),t._v(" "),_("td",[t._v("根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会")])]),t._v(" "),_("tr",[_("td",[t._v("输出完成")]),t._v(" "),_("td",[t._v("在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统")])])])]),t._v(" "),_("p",[t._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),t._v(" "),_("h2",{attrs:{id:"流程细节"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流程细节"}},[t._v("#")]),t._v(" 流程细节")]),t._v(" "),_("p",[t._v("Webpack 的构建流程可以分为以下三大阶段：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("div",{staticStyle:{width:"90px"}},[t._v("事件名")])]),t._v(" "),_("th",[t._v("解释")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("初始化")]),t._v(" "),_("td",[t._v("启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler")])]),t._v(" "),_("tr",[_("td",[t._v("编译")]),t._v(" "),_("td",[t._v("从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理")])]),t._v(" "),_("tr",[_("td",[t._v("输出")]),t._v(" "),_("td",[t._v("对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统")])])])]),t._v(" "),_("h3",{attrs:{id:"初始化阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段"}},[t._v("#")]),t._v(" 初始化阶段")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("div",{staticStyle:{width:"125px"}},[t._v("事件名")])]),t._v(" "),_("th",[t._v("解释")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("初始化参数")]),t._v(" "),_("td",[t._v("从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。 这个过程中还会执行配置文件中的插件实例化语句 new Plugin()")])]),t._v(" "),_("tr",[_("td",[t._v("实例化 Compiler")]),t._v(" "),_("td",[t._v("用上一步得到的参数初始化 Compiler 实例，Compiler 负责文件监听和启动编译。Compiler 实例中包含了完整的 Webpack 配置，全局只有一个 Compiler 实例。")])]),t._v(" "),_("tr",[_("td",[t._v("加载插件")]),t._v(" "),_("td",[t._v("依次调用插件的 apply 方法，让插件可以监听后续的所有事件节点。同时给插件传入 compiler 实例的引用，以方便插件通过 compiler 调用 Webpack 提供的 API。")])]),t._v(" "),_("tr",[_("td",[t._v("environment")]),t._v(" "),_("td",[t._v("开始应用 Node.js 风格的文件系统到 compiler 对象，以方便后续的文件寻找和读取。")])]),t._v(" "),_("tr",[_("td",[t._v("entry-option")]),t._v(" "),_("td",[t._v("读取配置的 Entrys，为每个 Entry 实例化一个对应的 EntryPlugin，为后面该 Entry 的递归解析工作做准备。")])]),t._v(" "),_("tr",[_("td",[t._v("after-plugins")]),t._v(" "),_("td",[t._v("调用完所有内置的和配置的插件的 apply 方法。")])]),t._v(" "),_("tr",[_("td",[t._v("after-resolvers")]),t._v(" "),_("td",[t._v("根据配置初始化完 resolver，resolver 负责在文件系统中寻找指定路径的文件。")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);