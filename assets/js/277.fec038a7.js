(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{621:function(s,t,a){"use strict";a.r(t);var S=a(43),e=Object(S.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss"}},[s._v("#")]),s._v(" XSS")]),s._v(" "),a("blockquote",[a("p",[s._v("XSS，即 Cross Site Script，中译是跨站脚本攻击；其原本缩写是 CSS，但为了和层叠样式表(Cascading Style Sheet)有所区分，因而在安全领域叫做 XSS。")])]),s._v(" "),a("p",[s._v("XSS 攻击，通常指黑客通过“HTML 注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户浏览器的一种攻击。在一开始， 这种攻击的演示案例是跨域的，所以叫做“跨站脚本”。但是发展到今天，由于 JavaScript 的强大功能以及网站前端应用的复杂化，是否跨域已经不再重要。")]),s._v(" "),a("p",[s._v("XSS 攻击是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。")]),s._v(" "),a("p",[s._v("攻击者对客户端网页注入的恶意脚本一般包括 JavaScript，有时也会包含 HTML 和 Flash。有很多种方式进行 XSS 攻击，但它们的共同点为：将一些隐私数据像 cookie、session 发送给攻击者，将受害者重定向到一个由攻击者控制的网站，在受害者的机器上进行一些恶意操作。")]),s._v(" "),a("p",[s._v("xss 攻击是跨站脚本攻击，例如在表单中提交含有可执行的 javascript 的内容文本，如果服务器端没有过滤或转义这些脚本，而这些脚本由通过内容的形式发布到了页面上，这个时候如果有其他用户访问这个网页，那么浏览器就会执行这些脚本，从而被攻击，从而获取用户的 cookie 等信息")]),s._v(" "),a("p",[s._v("XSS 攻击可以分为 3 类：反射型（非持久型）、存储型（持久型）、基于 DOM。")]),s._v(" "),a("h3",{attrs:{id:"反射型-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射型-xss"}},[s._v("#")]),s._v(" 反射型 XSS")]),s._v(" "),a("p",[s._v("反射型 XSS 只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功。反射型 XSS 也叫做“非持久型 XSS”(Non-persistent XSS)。")]),s._v(" "),a("h3",{attrs:{id:"存储型-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储型-xss"}},[s._v("#")]),s._v(" 存储型 XSS")]),s._v(" "),a("p",[s._v('存储型 XSS 会把用户输入的数据“存储”在服务器端。这种 XSS 具有很强的稳定性。比较常见的一个场景就是，黑客写下一篇包含有恶意 JavaScript 代码的博客文章，文章发表后，所有访问该博客文章的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。黑客把恶意的脚本保存到服务器端，所以这种 XSS 攻击就叫做“存储型 XSS"。')]),s._v(" "),a("p",[s._v('存储型 XSS 通常也叫做“持久型 XSS" (Persistent XSS)，因为从效果上来说，它存在的时间是比较长的。')]),s._v(" "),a("h3",{attrs:{id:"dom-based-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-based-xss"}},[s._v("#")]),s._v(" DOM Based Xss")]),s._v(" "),a("p",[s._v("实际上，这种类型的 XSs 并非按照“数据是否保存在服务器端”来划分，DOM Based XSS 从效果_上来说也是反射型 XSS。单独划分出来，是因为 DOM Based XSS 的形成原因比较特别，发现它的安全专家专门提出了这种类型的 XSS。出于历史原因，也就把它单独作为一个分类了。通过修改页面的 DOM 节点形成的 XSS，称之为 DOM Based XSS。")]),s._v(" "),a("h2",{attrs:{id:"防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防御"}},[s._v("#")]),s._v(" 防御")]),s._v(" "),a("ul",[a("li",[s._v("对于敏感的 cookie 信息，使用 HttpOnly，使 document 对象中找不到 cookie。")]),s._v(" "),a("li",[s._v("对于用户输入的信息要进行转义。")])]),s._v(" "),a("h2",{attrs:{id:"questions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#questions"}},[s._v("#")]),s._v(" questions")]),s._v(" "),a("p",[s._v("XSS 攻击的原理、分类、具体案例，前端如何防御")])])}),[],!1,null,null,null);t.default=e.exports}}]);